[alias]
  # Push up untracked branch to origin
  pushd = push -u origin HEAD

  uncommit = reset --soft HEAD^
  unstage = reset HEAD --

  # Pull latest from master and rebase current branch
  # Inspired by https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts
  sync = "!git show ${1-master} --oneline --quiet; f() { git fetch origin ${1-master}:${1-master}; git rebase ${1-master}; }; f"

  # List branches sorted by last modified
  bs = "!f() { git for-each-ref --sort='-authordate' --format='%(if:equals=2022)%(authordate:format:%Y)%(then)%(color:reset)%(else)%(color:reset)%(end)%(authordate:format:%b %d, %Y at %I:%M:%S %p %Z) %(if:equals=Brad Luczywo)%(authorname)%(then)%(color:bold blue)%(else)%(color:reset)%(end)%(align:20,right)%(authorname)%(end)   %(color:bold yellow)%(objectname:short) %(if)%(HEAD)%(then)%(color:green)* %(else)%(color:reset)  %(end)%(refname)' --color refs/heads | sed -e 's-refs/heads/--'; }; f"

  # List aliases
  la = "!git config -l | grep alias | cut -c 7-"

  # Clean up local branches that have been merged to master
  # https://stackoverflow.com/a/33548037/1988486
  bclean = "!f() { git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", $1); print $1}'); do git branch -D $branch; done; }; f"

  # Clean up origin branches that have been merged
  bfclean = "!f() { git log -5 --merges --format=%s | sed 's:Merge pull request #[0-9]* from wisr/::gi' | grep -v \"$(git branch --show-current)\" | xargs -r git branch -d 2>/dev/null; }; f"

  # Interactive rebase from the branch point
  ibase = "!f() { git rebase -i $(git merge-base $(git branch --show-current) ${1-development}); }; f"

  # Rebase onto a different branch: git onto other-branch
  # Defaults to finding the shared commit between the current branch and development
  # If you originally came from a different branch, pass that branch name in as another argument
  onto = "!f() { git rebase --onto ${1-development} $(git merge-base $(git branch --show-current) ${2-development}); }; f"

  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # See a concise listing of commits in B that are not in A: git ldiff A..B
  ldiff = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit

  # View the current working tree status using the short format.
  s = status -s

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules.
  p = pull --recurse-submodules

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit all changes.
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary.
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch --all
  remotes = remote --verbose

  # List aliases.
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits.
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with main.
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email

  stash-mv = "!f() { result=$(git stash drop ${1-0}); hash=$(echo $result | grep -Eo '[0-9a-z]{30,}'); git stash store -m \"${2-renamed}\" $hash; }; f"

[apply]

  # Detect whitespace errors when applying a patch.
  whitespace = fix

[branch]

  # Show most recently changed branches first.
  sort = -committerdate

  # Always treat `git pull` as `git pull --rebase`
	autosetuprebase = always

[core]

  # Use custom `.gitignore` and `.gitattributes`.
  excludesfile = ~/.gitignore

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
  branch = auto
  diff = auto
  status = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames.
  renames = copies

[diff "bin"]

  # Use `hexdump` to diff binary files.
  textconv = hexdump -v -C

[help]

  # Automatically correct and execute mistyped commands.
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]
  # Auto set upstream branch; removes the need for the `pushd` alias in this file
  # https://git-scm.com/docs/git-push#Documentation/git-push.txt-pushautoSetupRemote
  autoSetupRemote = true

  # https://git-scm.com/docs/git-config#git-config-pushdefault
        #default = simple
  # Make `git push` push relevant annotated tags when pushing branches out.
        #followTags = true

# URL shorthands

[stash]
  showPatch = true

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[init]

  defaultBranch = master
[user]
  name = Brad Luczywo
  email = bluczywo@avatarfleet.com

[credential "https://github.com"]
	helper = !/usr/bin/gh auth git-credential
